from flask import Flask, request, redirect
from flask.templating import render_template
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate, migrate
 
app = Flask(__name__, instance_relative_config=True)
app.debug = True

 
# adding configuration for using a sqlite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
 
# Creating an SQLAlchemy instance
db = SQLAlchemy(app)
 
# Settings for migrations
migrate = Migrate(app, db)
 
# Models
class BOOK(db.Model):
    Book_id = db.Column(db.Integer, primary_key=True)
    language_id = db.Column( db.Integer , primary_key = True)
    MRP = db.Column( db.Float )
    Publisher_id = db.Column( db.Integer , primary_key = True )
    publish_date = db.Column( db.Date ) 
    volume = db.Column( db.Integer )
    status = db.Column( db.String(20) )
    Title = db.Column(db.String(10))
    BOOK_AUTHOR_Book_id = db.Column(db.Integer , db.ForeignKey('book_author.Book_id') )
    BOOK_AUTHOR_Author_id = db.Column(db.Integer , db.ForeignKey('book_author.Author_id'))
    LANGUAGE_Language_id = db.Column(db.Integer , db.ForeignKey('language.Language_id') )
    
    book_author = db.relationship('BOOK_AUTHOR', backref='BOOK', lazy=True)
    language = db.relationship('LANGUAGE', backref='BOOK', lazy=True)    
 
    # repr method represents how one object of this datatable
    # will look like
    def __repr__(self):
        return (
            f"BOOK("
            f"Book_id={self.Book_id}, "
            f"Title='{self.Title}', "
            f"MRP={self.MRP}, "
            f"Publisher_id={self.Publisher_id}, "
            f"publish_date={self.publish_date}, "
            f"volume={self.volume}, "
            f"status='{self.status}', "
            f"BOOK_AUTHOR_Book_id={self.BOOK_AUTHOR_Book_id}, "
            f"BOOK_AUTHOR_Author_id={self.BOOK_AUTHOR_Author_id}, "
            f"LANGUAGE_Language_id={self.LANGUAGE_Language_id}"
            f")"
        )
 
class BOOK_AUTHOR(db.Model):
	Book_id = db.Column(db.Integer, primary_key=True)
	Author_id = db.Column(db.Integer , primary_key = True)
	AUTHOR_Author_id = db.Column(db.Integer , db.ForeignKey('author.Author_id'))
	
	author = db.relationship( 'AUTHOR', backref= 'BOOK_AUTHOR' , lazy=True)

	def __repr__(self):return (
            f"BOOK_AUTHOR("
            f"Book_id={self.Book_id}, "
            f"Author_id={self.Author_id}, "
            f"AUTHOR_Author_id={self.AUTHOR_Author_id}"
            f")"
        )

class AUTHOR(db.Model):
	Author_id = db.Column(db.Integer , primary_key = True)
	Name = db.Column(db.String(20) )
	Email = db.Column(db.String(30) )
	Phone_number = db.Column( db.String(20) )
	Status = db.Column(db.String(20))
	
	def __repr__(self):return (
            f"AUTHOR("
            f"Author_id={self.Author_id}, "
            f"Name='{self.Name}', "
            f"Email='{self.Email}', "
            f"Phone_number={self.Phone_number}, "
            f"Status='{self.Status}'"
            f")"
        )

class LANGUAGE(db.Model):
	Langauge_id = db.Column(db.Integer , primary_key = True )
	Name = db.Column( db.String(20))

	def __repr__(self):return (
            f"LANGUAGE("
	    f"Language_id={self.Language_id}, "
	    f"Name='{self.Name} '"
	    f")"
	)

class BOOK_ISSUE(db.Model):
	Issue_id = db.Column(db.Integer , primary_key = True )
	Date_of_issue = db.Column(db.Date)
	Book_id = db.Column(db.Integer)
	Member_id = db.Column(db.Integer)
	Expected_date_of_return = db.Column(db.Date)
	status = db.Column(db.String(20))
	MEMBER_Member_id = db.Column(db.Integer , db.ForeignKey('member.Member_id'))
	BOOK_Book_id = db.Column(db.Integer , db.ForeignKey('book.Book_id'))
	BOOK_language_id = db.Column(db.Integer , db.ForeignKey('book.language_id'))
	BOOK_Publisher_id = db.Column(db.Integer , db.ForeignKey('book.Publisher_id'))
	
	book = db.relationship('BOOK', backref='BOOK_ISSUE' , lazy = True)
	member = db.relationship('MEMBER', backref= 'BOOK_ISSUE' , lazy= True)
	
	def __repr__(self):
        return (
            f"BOOK_ISSUE("
            f"Issue_id={self.Issue_id}, "
            f"Date_of_issue={self.Date_of_issue}, "
            f"Book_id={self.Book_id}, "
            f"Member_id={self.Member_id}, "
            f"Expected_date_of_return={self.Expected_date_of_return}, "
            f"status='{self.status}', "
            f"MEMBER_Member_id={self.MEMBER_Member_id}, "
            f"BOOK_Book_id={self.BOOK_Book_id}, "
            f"BOOK_language_id={self.BOOK_language_id}, "
            f"BOOK_Publisher_id={self.BOOK_Publisher_id}"
            f")"
        )
	

class PUBLISHER(db.Model):
	publisher_id = db.Column(db.Integer , primary_key = True )
	Name = db.Column(db.String(20) )
	Address = db.Column(db.String(20))
	BOOK_Book_id = db.Column(db.Integer , db.ForeignKey('book.Book_id'))
	BOOK_language_id = db.Column(db.Integer , db.ForeignKey('book.language_id'))
	BOOK_Publisher_id = db.Column(db.Integer , db.ForeignKey('book.Publisher_id'))
	
	book = db.relationship('BOOK', backref='PUBLISHER' , lazy = True)
	
	def __repr__(self):
        return (
            f"PUBLISHER("
            f"publisher_id={self.publisher_id}, "
            f"Name='{self.Name}', "
            f"Address='{self.Address}', "
            f"BOOK_Book_id={self.BOOK_Book_id}, "
            f"BOOK_language_id={self.BOOK_language_id}, "
            f"BOOK_Publisher_id={self.BOOK_Publisher_id}"
            f")"
        )

class BOOK_RETURN(db.Model):
	issue_id = db.Column(db.Integer , primary_key = True )
	Actual_date_of_return = db.Column(db.Date)
	LateDays = db.Column(db.Integer)
	LateFee = db.Column(db.Integer)
	BOOK_ISSUE_Issue_id(db,Integer , db.ForeignKey('book_issue.Issue_id'))
	
	book_issue = db.relationship('BOOK_ISSUE', backref = 'BOOK_RETURN' , lazy = True )
	
	def __repr__(self):
        return (
            f"BOOK_RETURN("
            f"issue_id={self.issue_id}, "
            f"Actual_date_of_return={self.Actual_date_of_return}, "
            f"LateDays={self.LateDays}, "
            f"LateFee={self.LateFee}, "
            f"BOOK_ISSUE_Issue_id={self.BOOK_ISSUE_Issue_id}"
            f")"
        )


class MEMBER(db.Model):
	Member_id = db.Column(db.Integer , primary_key = True )
	Name = db.Column(db.String(10) )
	Branch_Code = db.Column( db.Integer )
	Roll_Number = db.Column( db.Integer )
	phone_Number = db.Column( db.String(20) )
	Email = db.Column( db.String(30) )
	Date_of_join = db.Column(db.Date)
	Status = db.Column( db.String(20))
	
	def __repr__(self):
        return (
            f"MEMBER("
            f"Member_id={self.Member_id}, "
            f"Name='{self.Name}', "
            f"Branch_Code={self.Branch_Code}, "
            f"Roll_Number={self.Roll_Number}, "
            f"phone_Number='{self.phone_Number}', "
            f"Email='{self.Email}', "
            f"Date_of_join={self.Date_of_join}, "
            f"Status='{self.Status}'"
            f")"
        )

# function to render index page
@app.route('/')
def index():
    libraries = Library.query.all()
    return render_template('index.html', libraries=libraries)
 
@app.route('/add_data')
def add_data():
    return render_template('add_profile.html')

@app.route('/search', methods=['GET'])
def search():
    search_query = request.args.get('search_query')
    libraries = Library.query.filter(Library.book_name.ilike(f"%{search_query}%")).all()
    return render_template('search_results.html', libraries=libraries, query=search_query)
 
# function to add profiles
@app.route('/add', methods=["POST"])
def profile():
    # In this function we will input data from the
    # form page and store it in our database. Remember
    # that inside the get the name should exactly be the same
    # as that in the html input fields
    book_name = request.form.get("book_name")
    author_name = request.form.get("author_name")
    status = request.form.get("status")
 
    # create an object of the Profile class of models and
    # store data as a row in our datatable
    if book_name != '' and author_name != '' :
        p = Library(book_name=book_name, author_name=author_name, status=status)
        db.session.add(p)
        db.session.commit()
        return redirect('/')
    else:
        return redirect('/')
 
@app.route('/delete/<int:id>')
def erase(id):
     
    # deletes the data on the basis of unique id and
    # directs to home page
    data = Library.query.get(id)
    db.session.delete(data)
    db.session.commit()
    return redirect('/')

@app.route('/update/<int:id>', methods=['GET', 'POST'])
def update(id):
    library = Library.query.get(id)
    if library:
        if request.method == 'POST':
            # Update book_name, author_name, and status if form is submitted
            new_book_name = request.form.get('book_name')
            new_author_name = request.form.get('author_name')
            new_status = request.form.get('status')

            if new_book_name:
                library.book_name = new_book_name
            if new_author_name:
                library.author_name = new_author_name
            if new_status:
                library.status = new_status

            db.session.commit()
            return redirect('/')

        # Render the update_profile.html page
        return render_template('update_profile.html', data=library)

    return redirect('/')
 
if __name__ == '__main__':
    app.run()






<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="static/style.css">

    <title>Index Page</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }
        .search-container {
        position: absolute;
        top: 10px; /* Adjust this value to control the vertical position */
        right: 10px; /* Adjust this value to control the horizontal position */
        }
    </style>
</head>
<body>
    <h3>Books</h3>
    <a href="/add_data">ADD</a>
    <div class="search-container">
        <form id="search-form" action="/search" method="GET">
            <input type="text" name="search_query" placeholder="Search for a book...">
            <button type="submit">Search</button>
        </form>
    </div>
    <br>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Book Name</th>
                <th>Author Name</th>
                <th>Status</th>
                <th>Action</th>
            </tr> 
        </thead>
        <tbody>
            {% for data in libraries %}
            <tr>
                <td>{{ data.id }}</td>
                <td>{{ data.book_name }}</td>
                <td>{{ data.author_name }}</td>
                <td>{{ data.status }}</td>
                <td>
                    <a href="/update/{{ data.id }}" type="button">Update</a>
                    <a href="/delete/{{ data.id }}" type="button">Delete</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>




